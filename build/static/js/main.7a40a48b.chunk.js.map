{"version":3,"sources":["logo.svg","ListItem.js","Dialog.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","handleFinished","bind","handleDelete","status","this","item","obj","id","name","finishedChange","totalChange","itemStyle","backgroundColor","color","textDecoration","key","style","onClick","className","Component","Dialog","handleClick","len","nums","newid","value","refs","myText","addNewTask","type","ref","placeholder","TodoList","state","list","finished","newitem","allTask","push","setState","todoItem","sum","forEach","map","index","updateFinished","updateTotal","addTask","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a40a48b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass ListItem extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.handleFinished = this.handleFinished.bind(this);\r\n\t\tthis.handleDelete = this.handleDelete.bind(this);\r\n\t} \r\n\r\n\thandleFinished () {\r\n\t\tvar status = this.props.item.status;\r\n\r\n\t\tstatus = (status === 0 ? 1 : 0);\r\n\r\n\t\tvar obj = {\r\n\t\t\tid: this.props.item.id,\r\n\t\t\tname: this.props.item.name,\r\n\t\t\tstatus: status\r\n\t\t}\r\n\t\t\r\n\t\tthis.props.finishedChange(obj);\t\r\n\t}\r\n\r\n\thandleDelete () {\r\n\t\tthis.props.totalChange(this.props.item);\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst item = this.props.item;\r\n\r\n\t\tconst unfinish = {\r\n\t\t\tbackgroundColor: '#DFFCB5',\r\n\t\t\tcolor: '#2EB872',\r\n\t\t};\r\n\r\n\t\tconst finish = {\r\n\t\t\tbackgroundColor: '#FFFA9D',\r\n\t\t\tcolor: '#FF9A3C',\r\n\t\t\ttextDecoration: 'line-through'\r\n\t\t}\r\n\r\n\t\tvar itemStyle = item.status === 0 ? unfinish : finish;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<li key={item.id} style={itemStyle}>\r\n\t\t\t\t<span \r\n\t\t\t\t\tonClick={this.handleFinished} \r\n\t\t\t\t\tid={item.id}\r\n\t\t\t\t\tclassName=\"check-btn\"\r\n\t\t\t\t\tstyle={{backgroundColor: item.status === 0 ? '#fff' : '#A1EAFB'}}\r\n\t\t\t\t></span>\r\n\t\t\t\t<span>{ item.name }</span>\r\n\t\t\t\t<span onClick={this.handleDelete} className=\"delete-btn\">删除</span>\r\n\t\t\t</li>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ListItem;","import React, { Component } from 'react';\r\n\r\nclass Dialog extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\r\n\thandleClick () {\r\n\t\tvar len = this.props.nums;\r\n\t\tvar newid = len > 0 ? len : 0;\r\n\t\tvar value = this.refs.myText.value;\r\n\t\tif (value !== '') {\r\n\t\t\tvar obj = {\r\n\t\t\t\tid: newid,\r\n\t\t\t\tname: value,\r\n\t\t\t\tstatus: 0\r\n\t\t\t};\r\n\t\t\tthis.refs.myText.value = '';\r\n\t\t\tthis.props.addNewTask(obj);\r\n\t\t}\r\n\t}\r\n\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<div className=\"dialog\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h3>想干啥</h3>\r\n\t\t\t\t\t<input type=\"text\" ref=\"myText\" placeholder=\"输入\"/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"button\" value=\"提交\" onClick={this.handleClick}/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Dialog;","import React, { Component } from 'react';\r\nimport ListItem from './ListItem';\r\nimport Dialog from './Dialog';\r\nimport './main.css';\r\n\r\nclass TodoList extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tlist: [{\r\n\t\t\t\tid: 0,\r\n\t\t\t\tname: '找个日常实习',\r\n\t\t\t\tstatus: 0\r\n\t\t\t}, {\r\n\t\t\t\tid: 1,\r\n\t\t\t\tname: '待到明年1月',\r\n\t\t\t\tstatus: 0\r\n\t\t\t}, {\r\n\t\t\t\tid: 2,\r\n\t\t\t\tname: '再来看看春招',\r\n\t\t\t\tstatus : 0\r\n\t\t\t}],\r\n\t\t\tfinished: 0\r\n\t\t};\r\n\t}\r\n\r\n\taddTask (newitem) {\r\n\t\tvar allTask = this.state.list;\r\n\t\tallTask.push(newitem);\r\n\t\tthis.setState({\r\n\t\t\tlist: allTask\r\n\t\t});\r\n\t}\r\n\r\n\tupdateFinished (todoItem) {\r\n\t\tvar sum = 0;\r\n\t\tthis.state.list.forEach( (item) => {\r\n\t\t\tif (item.id === todoItem.id) {\r\n\t\t\t\titem.status = todoItem.status;\r\n\t\t\t}\r\n\t\t\tif (item.status === 1) {\r\n\t\t\t\tsum++;\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tfinished: sum\r\n\t\t});\r\n\t}\r\n\r\n\tupdateTotal (todoItem) {\r\n\t\tvar obj = [], sum = 0;\r\n\t\tthis.state.list.forEach((item) => {\r\n\t\t\tif (item.id !== todoItem.id) {\r\n\t\t\t\tobj.push(item);\r\n\t\t\t\tif (item.status === 1 ) {\r\n\t\t\t\t\tsum++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({\r\n\t\t\tlist: obj,\r\n\t\t\tfinished: sum\r\n\t\t});\r\n\t}\r\n\r\n\trender () {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<h1>TodoList</h1>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{ this.state.list.map ((item, index) =>\r\n\t\t\t\t\t\t<ListItem \r\n\t\t\t\t\t\t\titem={item}  \r\n\t\t\t\t\t\t\tfinishedChange={this.updateFinished.bind(this)} \r\n\t\t\t\t\t\t\ttotalChange={this.updateTotal.bind(this)}\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)}\r\n\t\t\t\t    {/* <li>{this.state.finished}已完成&nbsp;/&nbsp;{this.state.list.length}总数</li> */}\r\n\t\t\t\t</ul>\r\n\t\t\t\t<Dialog addNewTask={this.addTask.bind(this)} nums={this.state.list.length}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoList from './TodoList';\n\n\nclass App extends Component {\n  render(){\n    return (\n        <TodoList/>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}